steps:
  # Step 1: Print a message to confirm the build started
  - name: 'alpine'
    entrypoint: 'sh'
    args: ['-c', 'echo Build started on Google Cloud!']

  # Step 2: Run basic commands (optional)
  - name: 'alpine'
    entrypoint: 'sh'
    args: ['-c', 'ls -la']

  # Step 3: Install dependencies and run Python script
  - name: 'python:3.12'
    entrypoint: 'sh'
    args: ['-c', 'pip install -r req/requirements.txt && python main.py']

  # Step 4: Build the Docker image with the build ID as the tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${_PROJECT_ID}/nk:${_BUILD_ID}', '.']

  # Step 5: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${_PROJECT_ID}/nk:${_BUILD_ID}']

  # Step 6: Install Google Cloud SDK and kubectl, and verify installation
  - name: 'debian'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Add Google Cloud SDK repository if it doesn't exist
        if ! grep -rhE ^deb /etc/apt/sources.list* | grep "cloud-sdk"; then
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" > /etc/apt/sources.list.d/google-cloud-sdk.list && \
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -;
        fi
        # Update package lists and install components
        apt-get update && \
        apt-get install -y google-cloud-sdk kubectl google-cloud-sdk-gke-gcloud-auth-plugin && \
        # Verify installations
        kubectl version --client && \
        gke-gcloud-auth-plugin --version

  # Step 7: Get credentials for the GKE cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'container',
      'clusters',
      'get-credentials',
      '${_CLUSTER}',
      '--zone',
      '${_ZONE}'
    ]

  # Step 8: Deploy the Helm chart
  - name: 'bitnami/helm:3.12.0'  # Use Bitnami's Helm image
    args:
      [
        'upgrade', '--install', 'my-app-release', './helm-chart',
        '--set', 'image.repository=gcr.io/${_PROJECT_ID}/nk',
        '--set', 'image.tag=${_BUILD_ID}',
        '--namespace', 'default'
      ]

  # Step 9: Print the build success message
  - name: 'alpine'
    entrypoint: 'sh'
    args: ['-c', 'echo Build finished successfully!']

# Specify logging options
options:
  logging: CLOUD_LOGGING_ONLY

# Specify required images for the build
images:
  - 'gcr.io/${_PROJECT_ID}/nk:${_BUILD_ID}'

substitutions:
  _CLUSTER: 'my-cluster-nilesh'  # Replace with your cluster name
  _ZONE: 'us-central1-a'           # Replace with your cluster zone
  _PROJECT_ID: '$PROJECT_ID'       # Project ID from Cloud Build
  _BUILD_ID: '$BUILD_ID'           # Build ID from Cloud Build
