steps:
  # Step 1: Print a message to confirm the build started
  - name: 'alpine'
    entrypoint: 'sh'
    args: ['-c', 'echo Build started on Google Cloud!']

  # Step 2: Run basic commands (optional)
  - name: 'alpine'
    entrypoint: 'sh'
    args: ['-c', 'ls -la']

  # Step 3: Install dependencies and run Python script
  - name: 'python:3.12'
    entrypoint: 'sh'
    args: ['-c', 'pip install -r req/requirements.txt && python main.py']

  # Step 4: Build the Docker image with the build ID as the tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/nk:$BUILD_ID', '.']

  # Step 5: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/nk:$BUILD_ID']

  # Step to create GKE cluster (optional, run once)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'container',
      'clusters',
      'create',
      'my-cluster-nk',
      '--zone',
      'us-central1-a',
      '--num-nodes',
      '1'
      ]
      
  # Step 6: Set up kubectl (Google Cloud SDK)
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'container',
      'clusters',
      'get-credentials',
      'my-cluster-nk',
      '--zone',
      'us-central1-a'
    ]

  # Step 7: Apply the Kubernetes Deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'deployment.yaml']

  # Step 8: Apply the Kubernetes Service to expose the app
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'service.yaml']

  # Step 9: Print the build success message
  - name: 'alpine'
    entrypoint: 'sh'
    args: ['-c', 'echo Build finished successfully!']

# Specify logging options
options:
  logging: CLOUD_LOGGING_ONLY

# Specify required images for the build (optional)
images:
  - gcr.io/$PROJECT_ID/nk:$BUILD_ID

substitutions:
  _CLUSTER: 'my-cluster-nk'
  _ZONE: 'us-central1-a'
